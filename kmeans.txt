import numpy as np

import pandas as pd

import matplotlib.pyplot as plt

df=pd.DataFrame({'X':[0.1,0.15,0.08,0.16,0.2,0.25,0.24,0.3],'y':[0.6,0.71,0.9,0.85,0.3,0.5,0.1,0.2]})

f1=df['X'].values
print(f1)

f2=df['y'].values
print(f2)

X=np.array(list(zip(f1,f2)))
print(X)

# centroids points
C_x=np.array([0.1,0.3])
C_y=np.array([0.6,0.2])

centroids=C_x,C_y
print(centroids)

colmap={1:'r',2:'b'}

plt.scatter(f1,f2)

plt.show()

# for i in centroids
plt.scatter(C_x[0],C_y[0],color=colmap[1])
plt.scatter(C_x[1],C_y[1],color=colmap[2])
plt.show()

C=np.array(list((C_x,C_y)),dtype=np.float32)

print(C)

plt.scatter(f1,f2)
plt.scatter(C_x[0],C_y[0],marker='*',color='r')
plt.scatter(C_x[1],C_y[1],marker='*',color='r')
plt.show()

from sklearn.cluster import KMeans

m=KMeans(n_clusters=2,random_state=0)

m.fit(X)

label=m.labels_

print(label)
count=0

for i in range(len(label)):
    if(label[i]==1):
        count=count+1
print("number of population around cluster:",count-1)

# new centroids
new_cen=m.cluster_centers_

print("previous centroids:")
print(centroids[0],centroids[1])


print("new centroids:")
print(new_cen[0],new_cen[1])


